---
description: "Agent factory rules: ensure each TypeScript file in src/agents defines exactly one VoltAgent Agent via new Agent({ … }) with required fields: name, instructions, llm, model, tools, memory, and hooks; supervisor Agent must include subAgents and retriever."
globs: 
alwaysApply: false
---
# Agent Factory Rules
# Ensures correct structure and conventions for all Agent definitions

description: "Agent factory rules: ensure each TypeScript file in src/agents defines exactly one VoltAgent Agent via new Agent({ … }) with required fields: name, instructions, llm, model, tools, memory, and hooks; supervisor Agent must include subAgents and retriever."
globs:
  - "src/agents/**/*.ts"
alwaysApply: true
---

1. **One Agent per file**: Export a factory function (e.g., `createMyAgent()`) returning a single `Agent` instance.

2. **Required properties**:
   - `name`: unique agent identifier.
   - `instructions`: clear role/purpose prompt.
   - `llm` & `model`: AI provider instance and model spec.
   - `tools`: array of tool or toolkit exports.
   - `memory`: use `LibSQLStorage` via `createWorkerMemory` or `createSupervisorMemory`.
   - `hooks`: instrument lifecycle with `createHooks({ onStart, onEnd, onToolStart, onToolEnd, [onHandoff] })`.

3. **Supervisor Agent** (`createSupervisorAgent()`):
   - Include all worker agents via `subAgents` mapping.
   - Attach a `retriever` from `createSupervisorRetriever()`.

4. **Worker Agents** (`createWorkerAgents()`):
   - Use `createWorkerMemory(agentType)` for memory storage.
   - Use `createWorkerHooks(agentType)` for per-task instrumentation.
   - Name conventions: e.g. `AI-Volt-Calculator`, `AI-Volt-DateTime`, etc.

5. **Registration**: List each factory function in `src/agents/index.ts` for centralized imports.


